

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE SCHEMA IF NOT EXISTS "contacts";


ALTER SCHEMA "contacts" OWNER TO "postgres";


CREATE SCHEMA IF NOT EXISTS "contributors";


ALTER SCHEMA "contributors" OWNER TO "postgres";


CREATE SCHEMA IF NOT EXISTS "countries";


ALTER SCHEMA "countries" OWNER TO "postgres";


CREATE SCHEMA IF NOT EXISTS "images";


ALTER SCHEMA "images" OWNER TO "postgres";


CREATE SCHEMA IF NOT EXISTS "languages";


ALTER SCHEMA "languages" OWNER TO "postgres";


CREATE EXTENSION IF NOT EXISTS "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE SCHEMA IF NOT EXISTS "texts";


ALTER SCHEMA "texts" OWNER TO "postgres";


CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."update_edited_editor_id_columns"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SET "search_path" TO ''
    AS $$
BEGIN
	NEW.edited = (now() AT TIME ZONE 'utc'::text);
	NEW.editor_id = auth.uid();
	RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_edited_editor_id_columns"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "contacts"."items" (
    "id" smallint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "email" "text",
    "phone" "text",
    "url" "text",
    "line_1" "text",
    "line_2" "text",
    "city" "text",
    "postal_code" "text",
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "country_item_id" smallint NOT NULL,
    "country_subdivision_id" smallint NOT NULL,
    CONSTRAINT "items_city_check" CHECK (("length"("city") <= 256)),
    CONSTRAINT "items_description_check" CHECK (("length"("description") <= 256)),
    CONSTRAINT "items_email_check" CHECK (("length"("email") <= 254)),
    CONSTRAINT "items_line_1_check" CHECK (("length"("line_1") <= 256)),
    CONSTRAINT "items_line_2_check" CHECK (("length"("line_2") <= 256)),
    CONSTRAINT "items_name_check" CHECK (("length"("name") <= 64)),
    CONSTRAINT "items_phone_check" CHECK (("length"("phone") <= 15)),
    CONSTRAINT "items_postal_code_check" CHECK (("length"("postal_code") <= 10)),
    CONSTRAINT "items_url_check" CHECK (("length"("url") <= 128))
);


ALTER TABLE "contacts"."items" OWNER TO "postgres";


COMMENT ON TABLE "contacts"."items" IS 'Items containing contact information (e.g., email, URL).';



ALTER TABLE "contacts"."items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "contacts"."items_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "contributors"."item_types" (
    "id" smallint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    CONSTRAINT "types_description_check" CHECK (("length"("description") < 255)),
    CONSTRAINT "types_name_check" CHECK (("length"("name") < 32))
);


ALTER TABLE "contributors"."item_types" OWNER TO "postgres";


COMMENT ON TABLE "contributors"."item_types" IS 'Types of Item (e.g., Author, Editor).';



CREATE TABLE IF NOT EXISTS "contributors"."items" (
    "id" smallint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    CONSTRAINT "items_name_check" CHECK (("length"("name") < 128))
);


ALTER TABLE "contributors"."items" OWNER TO "postgres";


COMMENT ON TABLE "contributors"."items" IS 'Items (e.g., Authors, Editors).';



CREATE TABLE IF NOT EXISTS "contributors"."items_contact_items" (
    "id" bigint NOT NULL,
    "item_id" smallint NOT NULL,
    "contact_item_id" smallint NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "contributors"."items_contact_items" OWNER TO "postgres";


COMMENT ON TABLE "contributors"."items_contact_items" IS 'Join table for Items and Contact Items.';



ALTER TABLE "contributors"."items_contact_items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "contributors"."items_contact_items_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "contributors"."items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "contributors"."items_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "contributors"."item_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "contributors"."types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "countries"."items" (
    "id" smallint NOT NULL,
    "name" "text" NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "code" "text" NOT NULL,
    CONSTRAINT "items_name_check" CHECK (("length"("name") <= 64))
);


ALTER TABLE "countries"."items" OWNER TO "postgres";


COMMENT ON TABLE "countries"."items" IS 'Countries as recognized by the International Organization for Standardization (ISO).';



COMMENT ON COLUMN "countries"."items"."code" IS 'ISO 3166 A-2 country code (e.g., “GB”, “US”).';



ALTER TABLE "countries"."items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "countries"."items_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "countries"."subdivisions" (
    "id" smallint NOT NULL,
    "name" "text" NOT NULL,
    "code" "text" NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "item_id" smallint NOT NULL,
    CONSTRAINT "subdivisions_code_check" CHECK (("length"("code") <= 8)),
    CONSTRAINT "subdivisions_name_check" CHECK (("length"("name") <= 64))
);


ALTER TABLE "countries"."subdivisions" OWNER TO "postgres";


COMMENT ON TABLE "countries"."subdivisions" IS 'ISO 3166-2 codes (e.g., “GB-SCT”, “GB-LND”, “US-TX”).';



COMMENT ON COLUMN "countries"."subdivisions"."code" IS 'ISO 3166-2 country subdivision codes (e.g., “GB-LND”, “US-TX”).';



ALTER TABLE "countries"."subdivisions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "countries"."subdivisions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "languages"."items" (
    "id" smallint NOT NULL,
    "name" "text" NOT NULL,
    "description" "text" NOT NULL,
    "code" "text" NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    CONSTRAINT "items_code_check" CHECK (("length"("code") = 5)),
    CONSTRAINT "items_description_check" CHECK (("length"("description") <= 256)),
    CONSTRAINT "items_name_check" CHECK (("length"("name") <= 32))
);


ALTER TABLE "languages"."items" OWNER TO "postgres";


COMMENT ON TABLE "languages"."items" IS 'Languages associated with Items of various kinds (e.g., Texts, Videos).';



COMMENT ON COLUMN "languages"."items"."code" IS 'ISO 639 (e.g., “en”) hyphenated with ISO 3166 A-2 (e.g., “GB”); e.g., “en-GB”.';



ALTER TABLE "languages"."items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "languages"."items_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."categories" (
    "id" smallint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    CONSTRAINT "categories_description_check" CHECK (("length"("description") < 255)),
    CONSTRAINT "categories_name_check" CHECK (("length"("name") < 32))
);


ALTER TABLE "texts"."categories" OWNER TO "postgres";


COMMENT ON TABLE "texts"."categories" IS 'Categories of items (e.g., Catechism, Hymnal).';



CREATE TABLE IF NOT EXISTS "texts"."content_types" (
    "id" smallint NOT NULL,
    "name" "text" NOT NULL,
    "description" "text" NOT NULL,
    "created" timestamp with time zone NOT NULL,
    "creator_id" "uuid" NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid"
);


ALTER TABLE "texts"."content_types" OWNER TO "postgres";


COMMENT ON TABLE "texts"."content_types" IS 'Types of Contents within Items (e.g., sentences, paragraphs, verses).';



ALTER TABLE "texts"."content_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."content_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."contents" (
    "id" bigint NOT NULL,
    "content_type_id" smallint NOT NULL,
    "value" "text" NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "content_id" bigint,
    "order" integer NOT NULL,
    "edition_id" integer
);


ALTER TABLE "texts"."contents" OWNER TO "postgres";


COMMENT ON TABLE "texts"."contents" IS 'Things contained within Items (e.g., sentences, paragraphs, verses, stanzas).';



ALTER TABLE "texts"."contents" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."contents_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."meta" (
    "id" integer NOT NULL,
    "title" "text" DEFAULT ''::"text" NOT NULL,
    "subtitle" "text",
    "description" "text",
    "isbn" "text",
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "variant_id" integer NOT NULL,
    "abridged" boolean DEFAULT false NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "language_item_id" smallint NOT NULL
);


ALTER TABLE "texts"."meta" OWNER TO "postgres";


COMMENT ON TABLE "texts"."meta" IS 'Meta data (i.e., title, subtitle, &c.) for Editions.';



ALTER TABLE "texts"."meta" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."edition_metadata_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."editions" (
    "id" integer NOT NULL,
    "published" "date" NOT NULL,
    "serial" smallint NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "item_id" smallint NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "texts"."editions" OWNER TO "postgres";


COMMENT ON TABLE "texts"."editions" IS 'Editions of items (e.g., 3rd).';



CREATE TABLE IF NOT EXISTS "texts"."editions_contributor_items_contributor_types" (
    "id" bigint NOT NULL,
    "edition_id" integer NOT NULL,
    "contributor_item_id" smallint NOT NULL,
    "contributor_item_type_id" smallint NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "texts"."editions_contributor_items_contributor_types" OWNER TO "postgres";


COMMENT ON TABLE "texts"."editions_contributor_items_contributor_types" IS 'Join table for Editions with Contributor Items and Types (e.g., 2nd Edition - Name - Author).';



ALTER TABLE "texts"."editions_contributor_items_contributor_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."editions_contributor_items_contributor_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."group_types" (
    "id" smallint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    CONSTRAINT "group_types_description_check" CHECK (("length"("description") < 255)),
    CONSTRAINT "group_types_name_check" CHECK (("length"("name") < 32))
);


ALTER TABLE "texts"."group_types" OWNER TO "postgres";


COMMENT ON TABLE "texts"."group_types" IS 'Types of Groups (e.g., Anthology, Series).';



ALTER TABLE "texts"."group_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."group_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."groups" (
    "id" smallint NOT NULL,
    "group_type_id" smallint NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    CONSTRAINT "groups_description_check" CHECK (("length"("description") < 1024)),
    CONSTRAINT "groups_name_check" CHECK (("length"("name") < 256))
);


ALTER TABLE "texts"."groups" OWNER TO "postgres";


COMMENT ON TABLE "texts"."groups" IS 'Groups of Items (e.g., Anthologies, Series).';



ALTER TABLE "texts"."groups" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."item_types" (
    "id" smallint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    CONSTRAINT "item_types_description_check" CHECK (("length"("description") < 255)),
    CONSTRAINT "item_types_name_check" CHECK (("length"("name") < 32))
);


ALTER TABLE "texts"."item_types" OWNER TO "postgres";


COMMENT ON TABLE "texts"."item_types" IS 'Types of item (e.g., book, tract).';



CREATE TABLE IF NOT EXISTS "texts"."items" (
    "id" smallint NOT NULL,
    "item_type_id" smallint NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "texts"."items" OWNER TO "postgres";


COMMENT ON TABLE "texts"."items" IS 'Texts of various editions (e.g., 2), categories (e.g., Hymnal), and types (e.g., Book)';



CREATE TABLE IF NOT EXISTS "texts"."items_categories" (
    "id" bigint NOT NULL,
    "item_id" smallint NOT NULL,
    "category_id" smallint NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "texts"."items_categories" OWNER TO "postgres";


COMMENT ON TABLE "texts"."items_categories" IS 'Join table for Items and Categories.';



CREATE TABLE IF NOT EXISTS "texts"."items_groups" (
    "id" integer NOT NULL,
    "item_id" smallint NOT NULL,
    "group_id" smallint NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "serial" smallint NOT NULL,
    CONSTRAINT "items_groups_serial_check" CHECK (("serial" >= 1))
);


ALTER TABLE "texts"."items_groups" OWNER TO "postgres";


COMMENT ON TABLE "texts"."items_groups" IS 'Join table for Items and Groups.';



COMMENT ON COLUMN "texts"."items_groups"."serial" IS 'Order of the item within the group (i.e., 1, 2, &c.).';



ALTER TABLE "texts"."items_groups" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."items_groups_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "texts"."categories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."text_categories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "texts"."editions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."text_editions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "texts"."items_categories" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."text_text_categories_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "texts"."item_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."text_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "texts"."items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."texts_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."variant_types" (
    "id" smallint NOT NULL,
    "name" "text" DEFAULT ''::"text" NOT NULL,
    "description" "text" DEFAULT ''::"text" NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    CONSTRAINT "variant_types_description_check" CHECK (("length"("description") < 255)),
    CONSTRAINT "variant_types_name_check" CHECK (("length"("name") < 32))
);


ALTER TABLE "texts"."variant_types" OWNER TO "postgres";


COMMENT ON TABLE "texts"."variant_types" IS 'Types of Variants (e.g., Ebook, Softcover, Hardcover).';



ALTER TABLE "texts"."variant_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."variant_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "texts"."variants" (
    "id" integer NOT NULL,
    "edited" timestamp with time zone,
    "editor_id" "uuid",
    "variant_type_id" smallint NOT NULL,
    "edition_id" integer NOT NULL,
    "created" timestamp with time zone DEFAULT ("now"() AT TIME ZONE 'utc'::"text") NOT NULL,
    "creator_id" "uuid" DEFAULT "auth"."uid"() NOT NULL
);


ALTER TABLE "texts"."variants" OWNER TO "postgres";


COMMENT ON TABLE "texts"."variants" IS 'Variants (e.g., Ebook, Softcover) of Editions.';



ALTER TABLE "texts"."variants" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "texts"."variants_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "contacts"."items"
    ADD CONSTRAINT "items_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "contributors"."items_contact_items"
    ADD CONSTRAINT "items_contact_items_item_id_contact_item_id_unique" UNIQUE ("item_id", "contact_item_id");



ALTER TABLE ONLY "contributors"."items_contact_items"
    ADD CONSTRAINT "items_contact_items_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "contributors"."items"
    ADD CONSTRAINT "items_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "contributors"."item_types"
    ADD CONSTRAINT "types_name_key" UNIQUE ("name");



ALTER TABLE ONLY "contributors"."item_types"
    ADD CONSTRAINT "types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "countries"."items"
    ADD CONSTRAINT "items_code_key" UNIQUE ("code");



ALTER TABLE ONLY "countries"."items"
    ADD CONSTRAINT "items_name_key" UNIQUE ("name");



ALTER TABLE ONLY "countries"."items"
    ADD CONSTRAINT "items_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "countries"."subdivisions"
    ADD CONSTRAINT "subdivisions_code_key" UNIQUE ("code");



ALTER TABLE ONLY "countries"."subdivisions"
    ADD CONSTRAINT "subdivisions_name_key" UNIQUE ("name");



ALTER TABLE ONLY "countries"."subdivisions"
    ADD CONSTRAINT "subdivisions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "languages"."items"
    ADD CONSTRAINT "items_code_key" UNIQUE ("code");



ALTER TABLE ONLY "languages"."items"
    ADD CONSTRAINT "items_name_key" UNIQUE ("name");



ALTER TABLE ONLY "languages"."items"
    ADD CONSTRAINT "items_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."content_types"
    ADD CONSTRAINT "content_types_name_key" UNIQUE ("name");



ALTER TABLE ONLY "texts"."content_types"
    ADD CONSTRAINT "content_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."contents"
    ADD CONSTRAINT "contents_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."meta"
    ADD CONSTRAINT "edition_meta_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."editions_contributor_items_contributor_types"
    ADD CONSTRAINT "editions_contributor_items_contributor_types_edition_id_contrib" UNIQUE ("edition_id", "contributor_item_id", "contributor_item_type_id");



ALTER TABLE ONLY "texts"."editions_contributor_items_contributor_types"
    ADD CONSTRAINT "editions_contributor_items_contributor_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."group_types"
    ADD CONSTRAINT "group_types_name_key" UNIQUE ("name");



ALTER TABLE ONLY "texts"."group_types"
    ADD CONSTRAINT "group_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."groups"
    ADD CONSTRAINT "groups_name_key" UNIQUE ("name");



ALTER TABLE ONLY "texts"."groups"
    ADD CONSTRAINT "groups_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."items_categories"
    ADD CONSTRAINT "items_categories_item_id_category_id_unique" UNIQUE ("item_id", "category_id");



ALTER TABLE ONLY "texts"."items_categories"
    ADD CONSTRAINT "items_categories_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."items_groups"
    ADD CONSTRAINT "items_groups_group_id_serial_unique" UNIQUE ("group_id", "serial");



ALTER TABLE ONLY "texts"."items_groups"
    ADD CONSTRAINT "items_groups_item_id_group_id_unique" UNIQUE ("item_id", "group_id");



ALTER TABLE ONLY "texts"."items_groups"
    ADD CONSTRAINT "items_groups_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."meta"
    ADD CONSTRAINT "meta_variant_id_key" UNIQUE ("variant_id");



ALTER TABLE ONLY "texts"."categories"
    ADD CONSTRAINT "text_categories_name_key" UNIQUE ("name");



ALTER TABLE ONLY "texts"."categories"
    ADD CONSTRAINT "text_categories_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."editions"
    ADD CONSTRAINT "text_editions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."item_types"
    ADD CONSTRAINT "text_types_name_key" UNIQUE ("name");



ALTER TABLE ONLY "texts"."item_types"
    ADD CONSTRAINT "text_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."items"
    ADD CONSTRAINT "texts_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."variant_types"
    ADD CONSTRAINT "variant_types_name_key" UNIQUE ("name");



ALTER TABLE ONLY "texts"."variant_types"
    ADD CONSTRAINT "variant_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "texts"."variants"
    ADD CONSTRAINT "variants_pkey" PRIMARY KEY ("id");



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "contacts"."items" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "contributors"."item_types" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "contributors"."items" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "countries"."items" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "countries"."subdivisions" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "languages"."items" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."categories" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."content_types" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."contents" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."editions" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."group_types" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."groups" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."item_types" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."items" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."meta" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."variant_types" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



CREATE OR REPLACE TRIGGER "update_edited_editor_id_columns" BEFORE UPDATE ON "texts"."variants" FOR EACH STATEMENT EXECUTE FUNCTION "public"."update_edited_editor_id_columns"();



ALTER TABLE ONLY "contacts"."items"
    ADD CONSTRAINT "items_country_item_id_fkey" FOREIGN KEY ("country_item_id") REFERENCES "countries"."items"("id");



ALTER TABLE ONLY "contacts"."items"
    ADD CONSTRAINT "items_country_subdivision_id_fkey" FOREIGN KEY ("country_subdivision_id") REFERENCES "countries"."subdivisions"("id");



ALTER TABLE ONLY "contacts"."items"
    ADD CONSTRAINT "items_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "contacts"."items"
    ADD CONSTRAINT "items_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "contributors"."item_types"
    ADD CONSTRAINT "item_types_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "contributors"."item_types"
    ADD CONSTRAINT "item_types_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "contributors"."items_contact_items"
    ADD CONSTRAINT "items_contact_items_contact_item_id_fkey" FOREIGN KEY ("contact_item_id") REFERENCES "contacts"."items"("id");



ALTER TABLE ONLY "contributors"."items_contact_items"
    ADD CONSTRAINT "items_contact_items_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "contributors"."items_contact_items"
    ADD CONSTRAINT "items_contact_items_item_id_fkey" FOREIGN KEY ("item_id") REFERENCES "contributors"."items"("id");



ALTER TABLE ONLY "contributors"."items"
    ADD CONSTRAINT "items_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "contributors"."items"
    ADD CONSTRAINT "items_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "countries"."items"
    ADD CONSTRAINT "items_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "countries"."items"
    ADD CONSTRAINT "items_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "countries"."subdivisions"
    ADD CONSTRAINT "subdivisions_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "countries"."subdivisions"
    ADD CONSTRAINT "subdivisions_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "countries"."subdivisions"
    ADD CONSTRAINT "subdivisions_item_id_fkey" FOREIGN KEY ("item_id") REFERENCES "countries"."items"("id");



ALTER TABLE ONLY "languages"."items"
    ADD CONSTRAINT "items_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "languages"."items"
    ADD CONSTRAINT "items_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."categories"
    ADD CONSTRAINT "categories_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."categories"
    ADD CONSTRAINT "categories_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."content_types"
    ADD CONSTRAINT "content_types_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."content_types"
    ADD CONSTRAINT "content_types_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."contents"
    ADD CONSTRAINT "contents_content_id_fkey" FOREIGN KEY ("content_id") REFERENCES "texts"."contents"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "texts"."contents"
    ADD CONSTRAINT "contents_content_type_id_fkey" FOREIGN KEY ("content_type_id") REFERENCES "texts"."content_types"("id");



ALTER TABLE ONLY "texts"."contents"
    ADD CONSTRAINT "contents_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."contents"
    ADD CONSTRAINT "contents_edition_id_fkey" FOREIGN KEY ("edition_id") REFERENCES "texts"."editions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "texts"."contents"
    ADD CONSTRAINT "contents_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."editions_contributor_items_contributor_types"
    ADD CONSTRAINT "editions_contributor_items_contri_contributor_item_type_id_fkey" FOREIGN KEY ("contributor_item_type_id") REFERENCES "contributors"."item_types"("id");



ALTER TABLE ONLY "texts"."editions_contributor_items_contributor_types"
    ADD CONSTRAINT "editions_contributor_items_contributor_contributor_item_id_fkey" FOREIGN KEY ("contributor_item_id") REFERENCES "contributors"."items"("id");



ALTER TABLE ONLY "texts"."editions_contributor_items_contributor_types"
    ADD CONSTRAINT "editions_contributor_items_contributor_types_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."editions_contributor_items_contributor_types"
    ADD CONSTRAINT "editions_contributor_items_contributor_types_edition_id_fkey" FOREIGN KEY ("edition_id") REFERENCES "texts"."editions"("id");



ALTER TABLE ONLY "texts"."editions"
    ADD CONSTRAINT "editions_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."editions"
    ADD CONSTRAINT "editions_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."editions"
    ADD CONSTRAINT "editions_item_id_fkey" FOREIGN KEY ("item_id") REFERENCES "texts"."items"("id");



ALTER TABLE ONLY "texts"."group_types"
    ADD CONSTRAINT "group_types_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."group_types"
    ADD CONSTRAINT "group_types_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."groups"
    ADD CONSTRAINT "groups_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."groups"
    ADD CONSTRAINT "groups_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."groups"
    ADD CONSTRAINT "groups_group_type_id_fkey" FOREIGN KEY ("group_type_id") REFERENCES "texts"."group_types"("id");



ALTER TABLE ONLY "texts"."item_types"
    ADD CONSTRAINT "item_types_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."item_types"
    ADD CONSTRAINT "item_types_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."items_categories"
    ADD CONSTRAINT "items_categories_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "texts"."categories"("id");



ALTER TABLE ONLY "texts"."items_categories"
    ADD CONSTRAINT "items_categories_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."items_categories"
    ADD CONSTRAINT "items_categories_item_id_fkey" FOREIGN KEY ("item_id") REFERENCES "texts"."items"("id");



ALTER TABLE ONLY "texts"."items"
    ADD CONSTRAINT "items_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."items"
    ADD CONSTRAINT "items_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."items_groups"
    ADD CONSTRAINT "items_groups_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."items_groups"
    ADD CONSTRAINT "items_groups_group_id_fkey" FOREIGN KEY ("group_id") REFERENCES "texts"."groups"("id");



ALTER TABLE ONLY "texts"."items_groups"
    ADD CONSTRAINT "items_groups_item_id_fkey" FOREIGN KEY ("item_id") REFERENCES "texts"."items"("id");



ALTER TABLE ONLY "texts"."items"
    ADD CONSTRAINT "items_item_type_id_fkey" FOREIGN KEY ("item_type_id") REFERENCES "texts"."item_types"("id");



ALTER TABLE ONLY "texts"."meta"
    ADD CONSTRAINT "meta_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."meta"
    ADD CONSTRAINT "meta_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."meta"
    ADD CONSTRAINT "meta_language_item_id_fkey" FOREIGN KEY ("language_item_id") REFERENCES "languages"."items"("id");



ALTER TABLE ONLY "texts"."meta"
    ADD CONSTRAINT "meta_variant_id_fkey" FOREIGN KEY ("variant_id") REFERENCES "texts"."variants"("id");



ALTER TABLE ONLY "texts"."variant_types"
    ADD CONSTRAINT "variant_types_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."variant_types"
    ADD CONSTRAINT "variant_types_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."variants"
    ADD CONSTRAINT "variants_creator_id_fkey" FOREIGN KEY ("creator_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."variants"
    ADD CONSTRAINT "variants_edition_id_fkey" FOREIGN KEY ("edition_id") REFERENCES "texts"."editions"("id");



ALTER TABLE ONLY "texts"."variants"
    ADD CONSTRAINT "variants_editor_id_fkey" FOREIGN KEY ("editor_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "texts"."variants"
    ADD CONSTRAINT "variants_variant_type_id_fkey" FOREIGN KEY ("variant_type_id") REFERENCES "texts"."variant_types"("id");



CREATE POLICY "Enable insert by creator_id and ensure null edit values" ON "contacts"."items" FOR INSERT TO "authenticated" WITH CHECK (((( SELECT "auth"."uid"() AS "uid") = "creator_id") AND ("edited" IS NULL) AND ("editor_id" IS NULL)));



CREATE POLICY "Enable read access for all users" ON "contacts"."items" FOR SELECT USING (true);



CREATE POLICY "Enable update by editor_id" ON "contacts"."items" FOR UPDATE TO "authenticated" USING (true) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "editor_id"));



ALTER TABLE "contacts"."items" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable insert for authenticated users only" ON "contributors"."item_types" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "contributors"."items" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "contributors"."items_contact_items" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for users based on creator_id" ON "contributors"."item_types" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "contributors"."items" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "contributors"."items_contact_items" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable read access for all users" ON "contributors"."item_types" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "contributors"."items" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "contributors"."items_contact_items" FOR SELECT USING (true);



ALTER TABLE "contributors"."item_types" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "contributors"."items" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "contributors"."items_contact_items" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable insert for authenticated users only" ON "countries"."items" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "countries"."subdivisions" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for users based on creator_id" ON "countries"."items" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "countries"."subdivisions" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable read access for all users" ON "countries"."items" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "countries"."subdivisions" FOR SELECT USING (true);



ALTER TABLE "countries"."items" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "countries"."subdivisions" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable insert for authenticated users only" ON "languages"."items" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for users based on creator_id" ON "languages"."items" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable read access for all users" ON "languages"."items" FOR SELECT USING (true);



ALTER TABLE "languages"."items" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Enable insert for authenticated users only" ON "texts"."categories" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."content_types" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."contents" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."editions" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."editions_contributor_items_contributor_types" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."group_types" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."groups" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."item_types" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."items" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."items_categories" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."items_groups" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."meta" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."variant_types" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "texts"."variants" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."categories" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."content_types" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."contents" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."editions" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."editions_contributor_items_contributor_types" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."group_types" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."groups" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."item_types" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."items" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."items_categories" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."items_groups" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."meta" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."variant_types" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable insert for users based on creator_id" ON "texts"."variants" AS RESTRICTIVE FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "creator_id"));



CREATE POLICY "Enable read access for all users" ON "texts"."categories" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."content_types" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."contents" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."editions" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."editions_contributor_items_contributor_types" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."group_types" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."groups" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."item_types" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."items" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."items_categories" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."items_groups" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."meta" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."variant_types" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "texts"."variants" FOR SELECT USING (true);



ALTER TABLE "texts"."categories" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."content_types" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."contents" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."editions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."editions_contributor_items_contributor_types" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."group_types" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."groups" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."item_types" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."items" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."items_categories" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."items_groups" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."meta" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."variant_types" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "texts"."variants" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";




















































































































































































GRANT ALL ON FUNCTION "public"."update_edited_editor_id_columns"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_edited_editor_id_columns"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_edited_editor_id_columns"() TO "service_role";


















GRANT ALL ON TABLE "texts"."categories" TO "anon";
GRANT ALL ON TABLE "texts"."categories" TO "authenticated";
GRANT ALL ON TABLE "texts"."categories" TO "service_role";



GRANT ALL ON TABLE "texts"."editions" TO "anon";
GRANT ALL ON TABLE "texts"."editions" TO "authenticated";
GRANT ALL ON TABLE "texts"."editions" TO "service_role";



GRANT ALL ON TABLE "texts"."item_types" TO "anon";
GRANT ALL ON TABLE "texts"."item_types" TO "authenticated";
GRANT ALL ON TABLE "texts"."item_types" TO "service_role";



GRANT ALL ON TABLE "texts"."items" TO "anon";
GRANT ALL ON TABLE "texts"."items" TO "authenticated";
GRANT ALL ON TABLE "texts"."items" TO "service_role";



GRANT ALL ON TABLE "texts"."items_categories" TO "anon";
GRANT ALL ON TABLE "texts"."items_categories" TO "authenticated";
GRANT ALL ON TABLE "texts"."items_categories" TO "service_role";



GRANT ALL ON SEQUENCE "texts"."text_categories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "texts"."text_categories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "texts"."text_categories_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "texts"."text_editions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "texts"."text_editions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "texts"."text_editions_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "texts"."text_text_categories_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "texts"."text_text_categories_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "texts"."text_text_categories_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "texts"."text_types_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "texts"."text_types_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "texts"."text_types_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "texts"."texts_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "texts"."texts_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "texts"."texts_id_seq" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
